{"version":3,"file":"assets/css/page/about.css","mappings":"AAII;EACI;EACA;EACA;EACA;EACA;ACHR;ADMI;EACI;EACA;EACA;EACA;ACJR;ADQI;EACI;EACA;EACA;ACNR;;AAbA;EACI;EACA;EACA;AAgBJ;AAdI;EACI;AAgBR;AAdI;EACI;EACA;EACA;EACA;EACA;AAgBR;;AAZA;EAEI;AAcJ;ACEI;EACI;EACA;EASI;ADRZ;ACUQ;EACI;EACA;EACA;ADRZ;ACWQ;EACI,oBArB+D;KAqB/D,iBArB+D;ADY3E;AA1BI;EACI;EACA;EACA;AA4BR;AAzBI;EACI;EACA;EACA;AA2BR;;AAvBA;EACI;EACA;EACA;AA0BJ;AAxBI;EACI;EACA;EACA;AA0BR;AAvBI;EACI;EACA;EACA;AAyBR;;AApBA;EACI;AAuBJ;AAtBI;EACI;AAwBR,C","sources":["webpack:///./source/scss/components/cards/_card-work.scss","webpack:///./source/scss/pages/about.scss","webpack:///./source/scss/config/_mixin.scss"],"sourcesContent":["@use '../../_config.scss' as *;\r\n\r\n.card-work{\r\n\r\n    &__number{\r\n        color: #ADAEAF;\r\n        font-size: 24px;\r\n        padding-bottom: 16px;\r\n        margin-bottom: 32px;\r\n        border-bottom: 1px solid #D5D6D7;\r\n    }\r\n\r\n    &__title{\r\n        font-weight: 400;\r\n        font-size: 42px;\r\n        margin-bottom: 24px;\r\n        color: #424345;\r\n        \r\n    }\r\n\r\n    &__info{\r\n        font-size: 18px;\r\n        line-height: 1.7;\r\n        color: #424345;\r\n    }\r\n}","@use '../_config.scss' as *;\r\n@use '../components/cards/_card-work.scss' as *;\r\n\r\n\r\n.about-header{\r\n    position: relative;\r\n    padding-top: 120px;\r\n    padding-bottom: 120px;\r\n\r\n    &__inner{\r\n        padding: 0px 80px;\r\n    }\r\n    &__title{\r\n        padding-bottom: 80px;\r\n        font-size: 120px;\r\n        font-weight: 400;\r\n        border-bottom: 1px solid #EBEBEB;\r\n        line-height: 1.5;\r\n    }\r\n}\r\n\r\n.my-profile{\r\n    @include imageRatio(1037,1430);\r\n    padding-bottom: clamp(5em, 21vh, 12em);;\r\n    &__inner{\r\n        display: grid;\r\n        grid-template-columns: 400px 1fr;\r\n        gap: 64px;\r\n    }\r\n\r\n    &__left{\r\n        font-size: 20px;\r\n        line-height: 1.5;\r\n        letter-spacing: 1px;\r\n    }\r\n}\r\n\r\n.my-work{\r\n    padding: 60px 0px 120px 0px;\r\n    position: relative;\r\n    background-color: #E9EAEB;\r\n\r\n    &__title{\r\n        font-size: 64px;\r\n        font-weight: 400;\r\n        margin-bottom: 80px;\r\n    }\r\n\r\n    &__grid{\r\n        display: grid;\r\n        grid-template-columns: repeat(3,1fr);\r\n        gap: 80px;\r\n    }\r\n\r\n}\r\n\r\n.my-skill{\r\n    padding: 60px 0px 120px 0px;\r\n    &__inner{\r\n        overflow: hidden;\r\n    }\r\n}","@use 'sass:math';\r\n@use 'sass:map';\r\n@use '_variable.scss' as *;\r\n@use '_function.scss' as *;\r\n\r\n// |‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾| //\r\n// | tmdrMIX v.1.2.1                         | //\r\n// | last update : 28 / 06 / 2023            | //\r\n// |_________________________________________| //\r\n\r\n// transform with fallback\r\n@mixin transform($declaration) {\r\n    -webkit-transform: #{$declaration};\r\n    -moz-transform: #{$declaration};\r\n    -ms-transform: #{$declaration};\r\n    -o-transform: #{$declaration};\r\n    transform: #{$declaration};\r\n}\r\n\r\n// transition with fallback\r\n@mixin transition($option) {\r\n    -webkit-transition: #{$option};\r\n    -moz-transition: #{$option};\r\n    -ms-transition: #{$option};\r\n    -o-transition: #{$option};\r\n    transition: #{$option};\r\n}\r\n\r\n// display flex with fallback\r\n@mixin displayFlex {\r\n    display: block;\r\n    display: -webkit-box;\r\n    display: -webkit-flex;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n}\r\n\r\n// make ratio classes\r\n@mixin imageRatio($imageWidth, $imageHeight, $maxWidth: false, $objectFit: cover, $className : 'image') {\r\n    &__#{$className}-container {\r\n        position: relative;\r\n        width: 100%;\r\n        @if ( $maxWidth ) {\r\n            display: inline-block;\r\n            @if ( $maxWidth == true ) {\r\n                max-width: #{$imageWidth}px;\r\n            } @else {\r\n                max-width: #{$maxWidth}px;\r\n            }\r\n        } @else {\r\n            display: block;\r\n        }\r\n        &:before {\r\n            content: \"\";\r\n            display: block;\r\n            padding-top: math.div($imageHeight, $imageWidth) * 100%;\r\n        }\r\n\r\n        .ratio-item {\r\n            object-fit: $objectFit;\r\n        }\r\n    }\r\n}\r\n\r\n// text elypsis mixin\r\n@mixin elypsis($fontName, $fontSize, $lines-to-show: 1, $line-height : 1.4) {\r\n\r\n    display: block; // Fallback for non-webkit\r\n    display: -webkit-box;\r\n    -webkit-box-orient: vertical;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    \r\n    @each $breakpoint, $value in map.get($fontSizes,$fontName,$fontSize) {\r\n        @if ( $breakpoint == 'default' ) {\r\n            $font-size : map.get($fontSizes, $fontName, $fontSize, default, font-size);\r\n            @if ( map.get($fontSizes, $fontName, $fontSize, default, line-height) ) {\r\n                $line-height: map.get($fontSizes, $fontName, $fontSize, default, line-height);\r\n            };\r\n\r\n            height: #{$font-size*$line-height*$lines-to-show}px; // Fallback for non-webkit\r\n            font-size: #{$font-size}px;\r\n            line-height: $line-height;\r\n            -webkit-line-clamp: $lines-to-show;\r\n        }\r\n        @else {\r\n            @media screen and (max-width: #{$breakpoint}px ) {\r\n                $font-size : map.get($fontSizes, $fontName, $fontSize, $breakpoint, font-size);\r\n                @if ( map.get($fontSizes, $fontName, $fontSize, $breakpoint, line-height) ) {\r\n                    $line-height: map.get($fontSizes, $fontName, $fontSize, $breakpoint, line-height);\r\n                };\r\n    \r\n                height: #{$font-size*$line-height*$lines-to-show}px; // Fallback for non-webkit\r\n                font-size: #{$font-size}px;\r\n                line-height: $line-height;\r\n                -webkit-line-clamp: $lines-to-show;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n// element state mixin\r\n@mixin fullState {\r\n    &:hover, &:active, &:focus, &:active:hover, &:active:focus {\r\n        @content;\r\n    }\r\n}\r\n\r\n// responsive Font Size\r\n@mixin fontSize($fontName, $fontSize, $useRem: true) {\r\n    @each $breakpoint, $value in map.get($fontSizes,$fontName,$fontSize) {\r\n        @if ( $breakpoint == 'default' ) {\r\n            @each $property, $value in map.get($fontSizes, $fontName, $fontSize, default) {\r\n                @if ($useRem == true and $property == 'font-size') {\r\n                    font-size: remSize($value);\r\n                }\r\n                @else if ($useRem == false and $property == 'font-size') {\r\n                    font-size: #{$value}px;\r\n                }\r\n                @else {\r\n                    #{$property} : #{$value};\r\n                }\r\n            }\r\n        } \r\n        @else {\r\n            @media screen and (max-width: #{$breakpoint}px ) {\r\n                @each $property, $value in map.get($fontSizes, $fontName, $fontSize, $breakpoint) {\r\n                    @if ($useRem == true and $property == 'font-size') {\r\n                        font-size: remSize($value);\r\n                    }\r\n                    @else if ($useRem == false and $property == 'font-size') {\r\n                        font-size: #{$value}px;\r\n                    }\r\n                    @else {\r\n                        #{$property} : #{$value};\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"],"names":[],"sourceRoot":""}